// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package endpoints

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EndpointsServiceClient is the client API for EndpointsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointsServiceClient interface {
	CreateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Empty, error)
	UpdateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Empty, error)
	ReadEndpoint(ctx context.Context, in *EndpointId, opts ...grpc.CallOption) (*EndpointsResponse, error)
	DeleteEndpoint(ctx context.Context, in *EndpointId, opts ...grpc.CallOption) (*Empty, error)
	ResumeEndpoint(ctx context.Context, in *EndpointId, opts ...grpc.CallOption) (*Empty, error)
}

type endpointsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointsServiceClient(cc grpc.ClientConnInterface) EndpointsServiceClient {
	return &endpointsServiceClient{cc}
}

func (c *endpointsServiceClient) CreateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/endpoints.EndpointsService/CreateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointsServiceClient) UpdateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/endpoints.EndpointsService/UpdateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointsServiceClient) ReadEndpoint(ctx context.Context, in *EndpointId, opts ...grpc.CallOption) (*EndpointsResponse, error) {
	out := new(EndpointsResponse)
	err := c.cc.Invoke(ctx, "/endpoints.EndpointsService/ReadEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointsServiceClient) DeleteEndpoint(ctx context.Context, in *EndpointId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/endpoints.EndpointsService/DeleteEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointsServiceClient) ResumeEndpoint(ctx context.Context, in *EndpointId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/endpoints.EndpointsService/ResumeEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointsServiceServer is the server API for EndpointsService service.
// All implementations must embed UnimplementedEndpointsServiceServer
// for forward compatibility
type EndpointsServiceServer interface {
	CreateEndpoint(context.Context, *Endpoint) (*Empty, error)
	UpdateEndpoint(context.Context, *Endpoint) (*Empty, error)
	ReadEndpoint(context.Context, *EndpointId) (*EndpointsResponse, error)
	DeleteEndpoint(context.Context, *EndpointId) (*Empty, error)
	ResumeEndpoint(context.Context, *EndpointId) (*Empty, error)
	mustEmbedUnimplementedEndpointsServiceServer()
}

// UnimplementedEndpointsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEndpointsServiceServer struct {
}

func (*UnimplementedEndpointsServiceServer) CreateEndpoint(context.Context, *Endpoint) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpoint not implemented")
}
func (*UnimplementedEndpointsServiceServer) UpdateEndpoint(context.Context, *Endpoint) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpoint not implemented")
}
func (*UnimplementedEndpointsServiceServer) ReadEndpoint(context.Context, *EndpointId) (*EndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEndpoint not implemented")
}
func (*UnimplementedEndpointsServiceServer) DeleteEndpoint(context.Context, *EndpointId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpoint not implemented")
}
func (*UnimplementedEndpointsServiceServer) ResumeEndpoint(context.Context, *EndpointId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeEndpoint not implemented")
}
func (*UnimplementedEndpointsServiceServer) mustEmbedUnimplementedEndpointsServiceServer() {}

func RegisterEndpointsServiceServer(s *grpc.Server, srv EndpointsServiceServer) {
	s.RegisterService(&_EndpointsService_serviceDesc, srv)
}

func _EndpointsService_CreateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointsServiceServer).CreateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.EndpointsService/CreateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointsServiceServer).CreateEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointsService_UpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointsServiceServer).UpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.EndpointsService/UpdateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointsServiceServer).UpdateEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointsService_ReadEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointsServiceServer).ReadEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.EndpointsService/ReadEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointsServiceServer).ReadEndpoint(ctx, req.(*EndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointsService_DeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointsServiceServer).DeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.EndpointsService/DeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointsServiceServer).DeleteEndpoint(ctx, req.(*EndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointsService_ResumeEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointsServiceServer).ResumeEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.EndpointsService/ResumeEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointsServiceServer).ResumeEndpoint(ctx, req.(*EndpointId))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndpointsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "endpoints.EndpointsService",
	HandlerType: (*EndpointsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEndpoint",
			Handler:    _EndpointsService_CreateEndpoint_Handler,
		},
		{
			MethodName: "UpdateEndpoint",
			Handler:    _EndpointsService_UpdateEndpoint_Handler,
		},
		{
			MethodName: "ReadEndpoint",
			Handler:    _EndpointsService_ReadEndpoint_Handler,
		},
		{
			MethodName: "DeleteEndpoint",
			Handler:    _EndpointsService_DeleteEndpoint_Handler,
		},
		{
			MethodName: "ResumeEndpoint",
			Handler:    _EndpointsService_ResumeEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "endpoints/endpoints.proto",
}
