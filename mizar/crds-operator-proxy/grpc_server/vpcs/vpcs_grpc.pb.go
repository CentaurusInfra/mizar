// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vpcs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VpcsServiceClient is the client API for VpcsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VpcsServiceClient interface {
	CreateVpc(ctx context.Context, in *Vpc, opts ...grpc.CallOption) (*Empty, error)
	UpdateVpc(ctx context.Context, in *Vpc, opts ...grpc.CallOption) (*Empty, error)
	ReadVpc(ctx context.Context, in *VpcId, opts ...grpc.CallOption) (*VpcsResponse, error)
	DeleteVpc(ctx context.Context, in *VpcId, opts ...grpc.CallOption) (*Empty, error)
	ResumeVpc(ctx context.Context, in *VpcId, opts ...grpc.CallOption) (*Empty, error)
}

type vpcsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVpcsServiceClient(cc grpc.ClientConnInterface) VpcsServiceClient {
	return &vpcsServiceClient{cc}
}

func (c *vpcsServiceClient) CreateVpc(ctx context.Context, in *Vpc, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vpcs.VpcsService/CreateVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcsServiceClient) UpdateVpc(ctx context.Context, in *Vpc, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vpcs.VpcsService/UpdateVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcsServiceClient) ReadVpc(ctx context.Context, in *VpcId, opts ...grpc.CallOption) (*VpcsResponse, error) {
	out := new(VpcsResponse)
	err := c.cc.Invoke(ctx, "/vpcs.VpcsService/ReadVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcsServiceClient) DeleteVpc(ctx context.Context, in *VpcId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vpcs.VpcsService/DeleteVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcsServiceClient) ResumeVpc(ctx context.Context, in *VpcId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vpcs.VpcsService/ResumeVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VpcsServiceServer is the server API for VpcsService service.
// All implementations must embed UnimplementedVpcsServiceServer
// for forward compatibility
type VpcsServiceServer interface {
	CreateVpc(context.Context, *Vpc) (*Empty, error)
	UpdateVpc(context.Context, *Vpc) (*Empty, error)
	ReadVpc(context.Context, *VpcId) (*VpcsResponse, error)
	DeleteVpc(context.Context, *VpcId) (*Empty, error)
	ResumeVpc(context.Context, *VpcId) (*Empty, error)
	mustEmbedUnimplementedVpcsServiceServer()
}

// UnimplementedVpcsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVpcsServiceServer struct {
}

func (*UnimplementedVpcsServiceServer) CreateVpc(context.Context, *Vpc) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVpc not implemented")
}
func (*UnimplementedVpcsServiceServer) UpdateVpc(context.Context, *Vpc) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVpc not implemented")
}
func (*UnimplementedVpcsServiceServer) ReadVpc(context.Context, *VpcId) (*VpcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVpc not implemented")
}
func (*UnimplementedVpcsServiceServer) DeleteVpc(context.Context, *VpcId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVpc not implemented")
}
func (*UnimplementedVpcsServiceServer) ResumeVpc(context.Context, *VpcId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeVpc not implemented")
}
func (*UnimplementedVpcsServiceServer) mustEmbedUnimplementedVpcsServiceServer() {}

func RegisterVpcsServiceServer(s *grpc.Server, srv VpcsServiceServer) {
	s.RegisterService(&_VpcsService_serviceDesc, srv)
}

func _VpcsService_CreateVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcsServiceServer).CreateVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpcs.VpcsService/CreateVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcsServiceServer).CreateVpc(ctx, req.(*Vpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcsService_UpdateVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcsServiceServer).UpdateVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpcs.VpcsService/UpdateVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcsServiceServer).UpdateVpc(ctx, req.(*Vpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcsService_ReadVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpcId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcsServiceServer).ReadVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpcs.VpcsService/ReadVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcsServiceServer).ReadVpc(ctx, req.(*VpcId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcsService_DeleteVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpcId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcsServiceServer).DeleteVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpcs.VpcsService/DeleteVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcsServiceServer).DeleteVpc(ctx, req.(*VpcId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcsService_ResumeVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpcId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcsServiceServer).ResumeVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpcs.VpcsService/ResumeVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcsServiceServer).ResumeVpc(ctx, req.(*VpcId))
	}
	return interceptor(ctx, in, info, handler)
}

var _VpcsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vpcs.VpcsService",
	HandlerType: (*VpcsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVpc",
			Handler:    _VpcsService_CreateVpc_Handler,
		},
		{
			MethodName: "UpdateVpc",
			Handler:    _VpcsService_UpdateVpc_Handler,
		},
		{
			MethodName: "ReadVpc",
			Handler:    _VpcsService_ReadVpc_Handler,
		},
		{
			MethodName: "DeleteVpc",
			Handler:    _VpcsService_DeleteVpc_Handler,
		},
		{
			MethodName: "ResumeVpc",
			Handler:    _VpcsService_ResumeVpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vpcs/vpcs.proto",
}
