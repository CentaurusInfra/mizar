// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package droplets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DropletsServiceClient is the client API for DropletsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropletsServiceClient interface {
	CreateDroplet(ctx context.Context, in *Droplet, opts ...grpc.CallOption) (*Empty, error)
	UpdateDroplet(ctx context.Context, in *Droplet, opts ...grpc.CallOption) (*Empty, error)
	ReadDroplet(ctx context.Context, in *DropletId, opts ...grpc.CallOption) (*DropletsResponse, error)
	DeleteDroplet(ctx context.Context, in *DropletId, opts ...grpc.CallOption) (*Empty, error)
	ResumeDroplet(ctx context.Context, in *DropletId, opts ...grpc.CallOption) (*Empty, error)
}

type dropletsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDropletsServiceClient(cc grpc.ClientConnInterface) DropletsServiceClient {
	return &dropletsServiceClient{cc}
}

func (c *dropletsServiceClient) CreateDroplet(ctx context.Context, in *Droplet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/droplets.DropletsService/CreateDroplet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropletsServiceClient) UpdateDroplet(ctx context.Context, in *Droplet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/droplets.DropletsService/UpdateDroplet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropletsServiceClient) ReadDroplet(ctx context.Context, in *DropletId, opts ...grpc.CallOption) (*DropletsResponse, error) {
	out := new(DropletsResponse)
	err := c.cc.Invoke(ctx, "/droplets.DropletsService/ReadDroplet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropletsServiceClient) DeleteDroplet(ctx context.Context, in *DropletId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/droplets.DropletsService/DeleteDroplet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropletsServiceClient) ResumeDroplet(ctx context.Context, in *DropletId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/droplets.DropletsService/ResumeDroplet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropletsServiceServer is the server API for DropletsService service.
// All implementations must embed UnimplementedDropletsServiceServer
// for forward compatibility
type DropletsServiceServer interface {
	CreateDroplet(context.Context, *Droplet) (*Empty, error)
	UpdateDroplet(context.Context, *Droplet) (*Empty, error)
	ReadDroplet(context.Context, *DropletId) (*DropletsResponse, error)
	DeleteDroplet(context.Context, *DropletId) (*Empty, error)
	ResumeDroplet(context.Context, *DropletId) (*Empty, error)
	mustEmbedUnimplementedDropletsServiceServer()
}

// UnimplementedDropletsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDropletsServiceServer struct {
}

func (*UnimplementedDropletsServiceServer) CreateDroplet(context.Context, *Droplet) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDroplet not implemented")
}
func (*UnimplementedDropletsServiceServer) UpdateDroplet(context.Context, *Droplet) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDroplet not implemented")
}
func (*UnimplementedDropletsServiceServer) ReadDroplet(context.Context, *DropletId) (*DropletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDroplet not implemented")
}
func (*UnimplementedDropletsServiceServer) DeleteDroplet(context.Context, *DropletId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDroplet not implemented")
}
func (*UnimplementedDropletsServiceServer) ResumeDroplet(context.Context, *DropletId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeDroplet not implemented")
}
func (*UnimplementedDropletsServiceServer) mustEmbedUnimplementedDropletsServiceServer() {}

func RegisterDropletsServiceServer(s *grpc.Server, srv DropletsServiceServer) {
	s.RegisterService(&_DropletsService_serviceDesc, srv)
}

func _DropletsService_CreateDroplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Droplet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropletsServiceServer).CreateDroplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/droplets.DropletsService/CreateDroplet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropletsServiceServer).CreateDroplet(ctx, req.(*Droplet))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropletsService_UpdateDroplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Droplet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropletsServiceServer).UpdateDroplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/droplets.DropletsService/UpdateDroplet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropletsServiceServer).UpdateDroplet(ctx, req.(*Droplet))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropletsService_ReadDroplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropletId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropletsServiceServer).ReadDroplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/droplets.DropletsService/ReadDroplet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropletsServiceServer).ReadDroplet(ctx, req.(*DropletId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropletsService_DeleteDroplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropletId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropletsServiceServer).DeleteDroplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/droplets.DropletsService/DeleteDroplet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropletsServiceServer).DeleteDroplet(ctx, req.(*DropletId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropletsService_ResumeDroplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropletId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropletsServiceServer).ResumeDroplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/droplets.DropletsService/ResumeDroplet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropletsServiceServer).ResumeDroplet(ctx, req.(*DropletId))
	}
	return interceptor(ctx, in, info, handler)
}

var _DropletsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "droplets.DropletsService",
	HandlerType: (*DropletsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDroplet",
			Handler:    _DropletsService_CreateDroplet_Handler,
		},
		{
			MethodName: "UpdateDroplet",
			Handler:    _DropletsService_UpdateDroplet_Handler,
		},
		{
			MethodName: "ReadDroplet",
			Handler:    _DropletsService_ReadDroplet_Handler,
		},
		{
			MethodName: "DeleteDroplet",
			Handler:    _DropletsService_DeleteDroplet_Handler,
		},
		{
			MethodName: "ResumeDroplet",
			Handler:    _DropletsService_ResumeDroplet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "droplets/droplets.proto",
}
