// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bouncers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BouncersServiceClient is the client API for BouncersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BouncersServiceClient interface {
	CreateBouncer(ctx context.Context, in *Bouncer, opts ...grpc.CallOption) (*Empty, error)
	UpdateBouncer(ctx context.Context, in *Bouncer, opts ...grpc.CallOption) (*Empty, error)
	ReadBouncer(ctx context.Context, in *BouncerId, opts ...grpc.CallOption) (*BouncersResponse, error)
	DeleteBouncer(ctx context.Context, in *BouncerId, opts ...grpc.CallOption) (*Empty, error)
	ResumeBouncer(ctx context.Context, in *BouncerId, opts ...grpc.CallOption) (*Empty, error)
}

type bouncersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBouncersServiceClient(cc grpc.ClientConnInterface) BouncersServiceClient {
	return &bouncersServiceClient{cc}
}

func (c *bouncersServiceClient) CreateBouncer(ctx context.Context, in *Bouncer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bouncers.BouncersService/CreateBouncer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncersServiceClient) UpdateBouncer(ctx context.Context, in *Bouncer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bouncers.BouncersService/UpdateBouncer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncersServiceClient) ReadBouncer(ctx context.Context, in *BouncerId, opts ...grpc.CallOption) (*BouncersResponse, error) {
	out := new(BouncersResponse)
	err := c.cc.Invoke(ctx, "/bouncers.BouncersService/ReadBouncer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncersServiceClient) DeleteBouncer(ctx context.Context, in *BouncerId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bouncers.BouncersService/DeleteBouncer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncersServiceClient) ResumeBouncer(ctx context.Context, in *BouncerId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bouncers.BouncersService/ResumeBouncer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BouncersServiceServer is the server API for BouncersService service.
// All implementations must embed UnimplementedBouncersServiceServer
// for forward compatibility
type BouncersServiceServer interface {
	CreateBouncer(context.Context, *Bouncer) (*Empty, error)
	UpdateBouncer(context.Context, *Bouncer) (*Empty, error)
	ReadBouncer(context.Context, *BouncerId) (*BouncersResponse, error)
	DeleteBouncer(context.Context, *BouncerId) (*Empty, error)
	ResumeBouncer(context.Context, *BouncerId) (*Empty, error)
	mustEmbedUnimplementedBouncersServiceServer()
}

// UnimplementedBouncersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBouncersServiceServer struct {
}

func (*UnimplementedBouncersServiceServer) CreateBouncer(context.Context, *Bouncer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBouncer not implemented")
}
func (*UnimplementedBouncersServiceServer) UpdateBouncer(context.Context, *Bouncer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBouncer not implemented")
}
func (*UnimplementedBouncersServiceServer) ReadBouncer(context.Context, *BouncerId) (*BouncersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBouncer not implemented")
}
func (*UnimplementedBouncersServiceServer) DeleteBouncer(context.Context, *BouncerId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBouncer not implemented")
}
func (*UnimplementedBouncersServiceServer) ResumeBouncer(context.Context, *BouncerId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeBouncer not implemented")
}
func (*UnimplementedBouncersServiceServer) mustEmbedUnimplementedBouncersServiceServer() {}

func RegisterBouncersServiceServer(s *grpc.Server, srv BouncersServiceServer) {
	s.RegisterService(&_BouncersService_serviceDesc, srv)
}

func _BouncersService_CreateBouncer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bouncer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncersServiceServer).CreateBouncer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncers.BouncersService/CreateBouncer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncersServiceServer).CreateBouncer(ctx, req.(*Bouncer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BouncersService_UpdateBouncer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bouncer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncersServiceServer).UpdateBouncer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncers.BouncersService/UpdateBouncer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncersServiceServer).UpdateBouncer(ctx, req.(*Bouncer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BouncersService_ReadBouncer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BouncerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncersServiceServer).ReadBouncer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncers.BouncersService/ReadBouncer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncersServiceServer).ReadBouncer(ctx, req.(*BouncerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BouncersService_DeleteBouncer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BouncerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncersServiceServer).DeleteBouncer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncers.BouncersService/DeleteBouncer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncersServiceServer).DeleteBouncer(ctx, req.(*BouncerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BouncersService_ResumeBouncer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BouncerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncersServiceServer).ResumeBouncer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bouncers.BouncersService/ResumeBouncer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncersServiceServer).ResumeBouncer(ctx, req.(*BouncerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _BouncersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bouncers.BouncersService",
	HandlerType: (*BouncersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBouncer",
			Handler:    _BouncersService_CreateBouncer_Handler,
		},
		{
			MethodName: "UpdateBouncer",
			Handler:    _BouncersService_UpdateBouncer_Handler,
		},
		{
			MethodName: "ReadBouncer",
			Handler:    _BouncersService_ReadBouncer_Handler,
		},
		{
			MethodName: "DeleteBouncer",
			Handler:    _BouncersService_DeleteBouncer_Handler,
		},
		{
			MethodName: "ResumeBouncer",
			Handler:    _BouncersService_ResumeBouncer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bouncers/bouncers.proto",
}
