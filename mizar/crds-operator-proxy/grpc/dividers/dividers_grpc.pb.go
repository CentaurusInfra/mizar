// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dividers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DividersServiceClient is the client API for DividersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DividersServiceClient interface {
	CreateDivider(ctx context.Context, in *Divider, opts ...grpc.CallOption) (*Empty, error)
	UpdateDivider(ctx context.Context, in *Divider, opts ...grpc.CallOption) (*Empty, error)
	ReadDivider(ctx context.Context, in *DividerId, opts ...grpc.CallOption) (*DividersResponse, error)
	DeleteDivider(ctx context.Context, in *DividerId, opts ...grpc.CallOption) (*Empty, error)
	ResumeDivider(ctx context.Context, in *DividerId, opts ...grpc.CallOption) (*Empty, error)
}

type dividersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDividersServiceClient(cc grpc.ClientConnInterface) DividersServiceClient {
	return &dividersServiceClient{cc}
}

func (c *dividersServiceClient) CreateDivider(ctx context.Context, in *Divider, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dividers.DividersService/CreateDivider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dividersServiceClient) UpdateDivider(ctx context.Context, in *Divider, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dividers.DividersService/UpdateDivider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dividersServiceClient) ReadDivider(ctx context.Context, in *DividerId, opts ...grpc.CallOption) (*DividersResponse, error) {
	out := new(DividersResponse)
	err := c.cc.Invoke(ctx, "/dividers.DividersService/ReadDivider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dividersServiceClient) DeleteDivider(ctx context.Context, in *DividerId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dividers.DividersService/DeleteDivider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dividersServiceClient) ResumeDivider(ctx context.Context, in *DividerId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dividers.DividersService/ResumeDivider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DividersServiceServer is the server API for DividersService service.
// All implementations must embed UnimplementedDividersServiceServer
// for forward compatibility
type DividersServiceServer interface {
	CreateDivider(context.Context, *Divider) (*Empty, error)
	UpdateDivider(context.Context, *Divider) (*Empty, error)
	ReadDivider(context.Context, *DividerId) (*DividersResponse, error)
	DeleteDivider(context.Context, *DividerId) (*Empty, error)
	ResumeDivider(context.Context, *DividerId) (*Empty, error)
	mustEmbedUnimplementedDividersServiceServer()
}

// UnimplementedDividersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDividersServiceServer struct {
}

func (*UnimplementedDividersServiceServer) CreateDivider(context.Context, *Divider) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDivider not implemented")
}
func (*UnimplementedDividersServiceServer) UpdateDivider(context.Context, *Divider) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDivider not implemented")
}
func (*UnimplementedDividersServiceServer) ReadDivider(context.Context, *DividerId) (*DividersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDivider not implemented")
}
func (*UnimplementedDividersServiceServer) DeleteDivider(context.Context, *DividerId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDivider not implemented")
}
func (*UnimplementedDividersServiceServer) ResumeDivider(context.Context, *DividerId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeDivider not implemented")
}
func (*UnimplementedDividersServiceServer) mustEmbedUnimplementedDividersServiceServer() {}

func RegisterDividersServiceServer(s *grpc.Server, srv DividersServiceServer) {
	s.RegisterService(&_DividersService_serviceDesc, srv)
}

func _DividersService_CreateDivider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Divider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DividersServiceServer).CreateDivider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dividers.DividersService/CreateDivider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DividersServiceServer).CreateDivider(ctx, req.(*Divider))
	}
	return interceptor(ctx, in, info, handler)
}

func _DividersService_UpdateDivider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Divider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DividersServiceServer).UpdateDivider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dividers.DividersService/UpdateDivider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DividersServiceServer).UpdateDivider(ctx, req.(*Divider))
	}
	return interceptor(ctx, in, info, handler)
}

func _DividersService_ReadDivider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DividerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DividersServiceServer).ReadDivider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dividers.DividersService/ReadDivider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DividersServiceServer).ReadDivider(ctx, req.(*DividerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DividersService_DeleteDivider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DividerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DividersServiceServer).DeleteDivider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dividers.DividersService/DeleteDivider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DividersServiceServer).DeleteDivider(ctx, req.(*DividerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DividersService_ResumeDivider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DividerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DividersServiceServer).ResumeDivider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dividers.DividersService/ResumeDivider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DividersServiceServer).ResumeDivider(ctx, req.(*DividerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _DividersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dividers.DividersService",
	HandlerType: (*DividersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDivider",
			Handler:    _DividersService_CreateDivider_Handler,
		},
		{
			MethodName: "UpdateDivider",
			Handler:    _DividersService_UpdateDivider_Handler,
		},
		{
			MethodName: "ReadDivider",
			Handler:    _DividersService_ReadDivider_Handler,
		},
		{
			MethodName: "DeleteDivider",
			Handler:    _DividersService_DeleteDivider_Handler,
		},
		{
			MethodName: "ResumeDivider",
			Handler:    _DividersService_ResumeDivider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dividers/dividers.proto",
}
