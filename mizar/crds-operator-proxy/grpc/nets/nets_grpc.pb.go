// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetsServiceClient is the client API for NetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetsServiceClient interface {
	CreateNet(ctx context.Context, in *Net, opts ...grpc.CallOption) (*Empty, error)
	UpdateNet(ctx context.Context, in *Net, opts ...grpc.CallOption) (*Empty, error)
	ReadNet(ctx context.Context, in *NetId, opts ...grpc.CallOption) (*NetsResponse, error)
	DeleteNet(ctx context.Context, in *NetId, opts ...grpc.CallOption) (*Empty, error)
	ResumeNet(ctx context.Context, in *NetId, opts ...grpc.CallOption) (*Empty, error)
}

type netsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetsServiceClient(cc grpc.ClientConnInterface) NetsServiceClient {
	return &netsServiceClient{cc}
}

func (c *netsServiceClient) CreateNet(ctx context.Context, in *Net, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/nets.NetsService/CreateNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netsServiceClient) UpdateNet(ctx context.Context, in *Net, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/nets.NetsService/UpdateNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netsServiceClient) ReadNet(ctx context.Context, in *NetId, opts ...grpc.CallOption) (*NetsResponse, error) {
	out := new(NetsResponse)
	err := c.cc.Invoke(ctx, "/nets.NetsService/ReadNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netsServiceClient) DeleteNet(ctx context.Context, in *NetId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/nets.NetsService/DeleteNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netsServiceClient) ResumeNet(ctx context.Context, in *NetId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/nets.NetsService/ResumeNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetsServiceServer is the server API for NetsService service.
// All implementations must embed UnimplementedNetsServiceServer
// for forward compatibility
type NetsServiceServer interface {
	CreateNet(context.Context, *Net) (*Empty, error)
	UpdateNet(context.Context, *Net) (*Empty, error)
	ReadNet(context.Context, *NetId) (*NetsResponse, error)
	DeleteNet(context.Context, *NetId) (*Empty, error)
	ResumeNet(context.Context, *NetId) (*Empty, error)
	mustEmbedUnimplementedNetsServiceServer()
}

// UnimplementedNetsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetsServiceServer struct {
}

func (*UnimplementedNetsServiceServer) CreateNet(context.Context, *Net) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNet not implemented")
}
func (*UnimplementedNetsServiceServer) UpdateNet(context.Context, *Net) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNet not implemented")
}
func (*UnimplementedNetsServiceServer) ReadNet(context.Context, *NetId) (*NetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNet not implemented")
}
func (*UnimplementedNetsServiceServer) DeleteNet(context.Context, *NetId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNet not implemented")
}
func (*UnimplementedNetsServiceServer) ResumeNet(context.Context, *NetId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeNet not implemented")
}
func (*UnimplementedNetsServiceServer) mustEmbedUnimplementedNetsServiceServer() {}

func RegisterNetsServiceServer(s *grpc.Server, srv NetsServiceServer) {
	s.RegisterService(&_NetsService_serviceDesc, srv)
}

func _NetsService_CreateNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Net)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetsServiceServer).CreateNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nets.NetsService/CreateNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetsServiceServer).CreateNet(ctx, req.(*Net))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetsService_UpdateNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Net)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetsServiceServer).UpdateNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nets.NetsService/UpdateNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetsServiceServer).UpdateNet(ctx, req.(*Net))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetsService_ReadNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetsServiceServer).ReadNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nets.NetsService/ReadNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetsServiceServer).ReadNet(ctx, req.(*NetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetsService_DeleteNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetsServiceServer).DeleteNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nets.NetsService/DeleteNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetsServiceServer).DeleteNet(ctx, req.(*NetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetsService_ResumeNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetsServiceServer).ResumeNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nets.NetsService/ResumeNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetsServiceServer).ResumeNet(ctx, req.(*NetId))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nets.NetsService",
	HandlerType: (*NetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNet",
			Handler:    _NetsService_CreateNet_Handler,
		},
		{
			MethodName: "UpdateNet",
			Handler:    _NetsService_UpdateNet_Handler,
		},
		{
			MethodName: "ReadNet",
			Handler:    _NetsService_ReadNet_Handler,
		},
		{
			MethodName: "DeleteNet",
			Handler:    _NetsService_DeleteNet_Handler,
		},
		{
			MethodName: "ResumeNet",
			Handler:    _NetsService_ResumeNet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nets/nets.proto",
}
